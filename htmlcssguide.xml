<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="styleguide.xsl"?>
<GUIDE title="Google HTML/CSS 编程风格指南">
  <p class="revision">
    
    版本号 2.23
  </p>
  
  <OVERVIEW>
    <CATEGORY title="重要提示">
      <STYLEPOINT title="显示该指南的隐藏详情">
        <SUMMARY>
          该编程风格指南包含了许多默认隐藏的详细信息。这些信息的左侧标有三角形图标。点击左侧的图标，你应该能看到下方显示的“好耶”。
        </SUMMARY>
        <BODY>
          <p>
            好耶！现在你知道可以展开条目来获取详细信息。此外，该文档上方还有“展开全部”按钮。
          </p>
        </BODY>
      </STYLEPOINT>
    </CATEGORY>
    <CATEGORY title="背景知识">
      
      <p>
        This document defines formatting and style rules for HTML and
        CSS. It aims at improving collaboration, code quality, and
        enabling supporting infrastructure. It applies to raw,
        working files that use HTML and CSS, including GSS
        files. Tools are free to obfuscate, minify, and compile as
        long as the general code quality is maintained.
        该文档定义了HTML和CSS的编码格式与风格，旨在改善合作、代码质量，并且使基础代码的支持成为可能。
        它应用于使用HTML和CSS的原始工作文件，包括GSS文件。工具可以自由地模糊、缩小、编译，直到达成总体的代码质量。
      </p>
      
      
    </CATEGORY>
  </OVERVIEW>

  <CATEGORY title="总体风格规则">
    <STYLEPOINT title="协议">
      <SUMMARY>
        省略嵌入资源的协议。
      </SUMMARY>
      <BODY>
        <p>
          省略指向图片、其他媒体文件、样式表、脚本文件的URL的协议部分（如<code>http:</code>、<code>https:</code>），除非这些文件不能同时支持两种协议。
        </p>
        <p>
          Omitting the protocol—which makes the URL
          relative—prevents mixed content issues and results in
          minor file size savings.
          省略协议可以使URL更相对，防止混合内容问题，节约文件大小。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;script src="http://www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          .example {
            background: url(http://www.google.com/images/example);
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          .example {
            background: url(//www.google.com/images/example);
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    
  </CATEGORY>

  <CATEGORY title="总体格式规则">
    <STYLEPOINT title="缩进">
      <SUMMARY>
        每次缩进两个空格。
      </SUMMARY>
      <BODY>
        <p>
          Don’t use tabs or mix tabs and spaces for indentation.
          别用制表符（tab）或者制表符和空格混用缩进。
        </p>
        <CODE_SNIPPET>
          &lt;ul&gt;
            &lt;li&gt;Fantastic
            &lt;li&gt;Great
          &lt;/ul&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          .example {
            color: blue;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="大小写">
      <SUMMARY>
        只用小写。
      </SUMMARY>
      <BODY>
        <p>
          所有代码都应该使用小写：应用于包括HTML元素名、元素属性、元素属性值（除了<code>text/CDATA</code>）、
          CSS选择器、CSS属性、CSS属性值（字符串除外）。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;A HREF="/"&gt;Home&lt;/A&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;img src="google.png" alt="Google"&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          color: #E5E5E5;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          color: #e5e5e5;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="末尾的空格">
      <SUMMARY>
        删掉末尾的空格。
      </SUMMARY>
      <BODY>
        <p>
          末尾的空格没有意义，而且可能使diff程序复杂化。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;p&gt;What?_
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;p&gt;Yes please.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="总体元标签规则">
    <STYLEPOINT title="编码">
      <SUMMARY>
        使用UTF-8（无BOM）编码。
      </SUMMARY>
      <BODY>
        <p>
          确保你的编辑器使用不含字节顺序标记（BOM）的UTF-8作为字符编码。
        </p>
        <p>
          通过<code>&lt;meta charset="utf-8"&gt;</code>指定HTML模板和文档的编码。不要指定样式表的编码，样式表文件会默认编码为UTF-8。
        </p>
        <p>
          （更多关于编码的信息，以及何时如何指定编码可以参考<a href="http://www.w3.org/International/tutorials/tutorial-char-enc/">Handling character encodings in HTML and CSS</a>。）
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="注释">
      <SUMMARY>
        在可能的情况下，解释必要的代码。
      </SUMMARY>
      <BODY>
        <p>
          使用注释来解释代码：这段代码包含了什么，它是用于什么目的，为什么选用这个解决方式？
        </p>
        <p>
          （该项不是必须的，因为期望于总是保持良好的文档代码并不现实。实现程度可能根据HTML和CSS代码有很大的不同，也同时依赖于项目的复杂程度。）
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="活动项目">
      <SUMMARY>
        用<code>TODO</code>来标记待办事项和活动项目。
      </SUMMARY>
      <BODY>
        <p>
          仅仅使用关键字<code>TODO</code>来突出待办事项，而不要用其他的诸如<code>@@</code>的一般格式。
        </p>
        <p>
          可以在后面括号里加上联系人（用户名或者邮件列表），格式如<code>TODO(contact)</code>。
        </p>
        <p>
          在冒号后写上工作项，格式如<code>TODO: 工作项</code>。
        </p>
        
        <CODE_SNIPPET>
          {# TODO(john.doe): revisit centering #}
          &lt;center&gt;Test&lt;/center&gt;
        </CODE_SNIPPET>
        
        <CODE_SNIPPET>
          &lt;!-- TODO: remove optional tags --&gt;
          &lt;ul&gt;
            &lt;li&gt;Apples&lt;/li&gt;
            &lt;li&gt;Oranges&lt;/li&gt;
          &lt;/ul&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="HTML格式规则">
    <STYLEPOINT title="文档类型">
      <SUMMARY>
        使用HTML5。
      </SUMMARY>
      <BODY>
        <p>
          HTML5（HTML语法）是所有HTML文档的首选：<code>&lt;!DOCTYPE html&gt;</code>.
        </p>
        <p>
          （推荐使用HTML（<code>text/html</code>），而不要使用XHTML。XHTML（<a href="http://hixie.ch/advocacy/xhtml"><code>application/xhtml+xml</code></a>）缺乏浏览器和架构支持，而且相对HTML提供了较少的优化空间。
        </p>
        <p>
          虽然HTML支持这个写法，但最好不要闭合空元素。也就是说，应该写成<code>&lt;br&gt;</code>，而不是<code>&lt;br /&gt;</code>。
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="HTML合法性校验">
      <SUMMARY>
        尽可能地使用符合语法的HTML。
      </SUMMARY>
      <BODY>
        <p>
          使用符合语法的HTML代码，除非由于文件大小限制而无法实现。
        </p>
        
        <p>
          使用校验工具（如<a href="http://validator.w3.org/nu/">W3C HTML校验器</a>进行测试。
        </p>
        <p>
          Using valid HTML is a measurable baseline quality attribute
          that contributes to learning about technical requirements
          and constraints, and that ensures proper HTML usage.
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;title&gt;测试&lt;/title&gt;
          &lt;article&gt;这仅仅是个测试。
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;meta charset="utf-8"&gt;
          &lt;title&gt;测试&lt;/title&gt;
          &lt;article&gt;这仅仅是个测试。&lt;/article&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="语义">
      <SUMMARY>
        根据适用情况使用对应HTML元素。
      </SUMMARY>
      <BODY>
        <p>
          在对应元素的设计场景下使用适当元素（有时被不恰当地称为“标签”）。
          例如，在标题部分使用<code>heading</code>元素，在段落中使用<code>p</code>元素，在锚点使用<code>a</code>元素，如此等等。
        </p>
        <p>
          根据HTML的设计原意来使用标签，在可访问性、重用、代码效率上都有重要意义。
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;div onclick="goToRecommendations();"&gt;All recommendations&lt;/div&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;a href="recommendations/"&gt;All recommendations&lt;/a&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="多媒体备选">
      <SUMMARY>
        为多媒体提供替换内容。
      </SUMMARY>
      <BODY>
        <p>
          确保为多媒体（如图片、视频、通过<code>canvas</code>表现的动画）提供替代的访问方式。
          为图片提供描述性的文字（<code>alt</code>），尽可能为视频和音频提供可用的副本和标题。
        </p>
        <p>
          为多媒体提供替代内容在可访问行上有重要意义：
          没有<code>@alt</code>的情况下，盲人用户几乎无法得知图片的内容，其他用户也可能无法理解视频或音频的内容。
        </p>
        <p>
          （在图片的<code>alt</code>属性中注明图片的内容；
          无法使用CSS代替的装饰性图片则不需要设置代替文本，应该写成<code>alt=""</code>。）
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;img src="spreadsheet.png"&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;img src="spreadsheet.png" alt="Spreadsheet screenshot."&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>

    <STYLEPOINT title="关注点分离">
      <SUMMARY>
        把结构与展现和行为分开。
      </SUMMARY>
      <BODY>
        <p>
          严格地保持结构（标记）、展现（样式）、行为（脚本）分离，而且试着尽量减少让三者之间的交互。
        </p>
        <p>
          也就是说，保证文档和模板只包含结构性的HTML。
          把所有与展现有关的东西全部搬进样式表，把所有和行为有关的搬进脚本。
        </p>
        <p>
          除此之外，尽可能地减少联系的地方：在文档和模板中尽可能少地链接样式表和脚本文件。
        </p>
        <p>
          将结构与展现和行为分离是为了便于维护。修改HTML文档和模板总是比更新样式表和脚本付出更大代价。
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;HTML sucks&lt;/title&gt;
          &lt;link rel="stylesheet" href="base.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="grid.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="print.css" media="print"&gt;
          &lt;h1 style="font-size: 1em;"&gt;HTML sucks&lt;/h1&gt;
          &lt;p&gt;I’ve read about this on a few sites but now I’m sure:
            &lt;u&gt;HTML is stupid!!1&lt;/u&gt;
          &lt;center&gt;I can’t believe there’s no way to control the styling of
            my website without doing everything all over again!&lt;/center&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;My first CSS-only redesign&lt;/title&gt;
          &lt;link rel="stylesheet" href="default.css"&gt;
          &lt;h1&gt;My first CSS-only redesign&lt;/h1&gt;
          &lt;p&gt;I’ve read about this on a few sites but today I’m actually
            doing it: separating concerns and avoiding anything in the HTML of
            my website that is presentational.
          &lt;p&gt;It’s awesome!
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="实体引用">
      <SUMMARY>
        不要使用实体引用。
      </SUMMARY>
      <BODY>
        <p>
          如果团队在文件和编辑器中使用相同的编码（UTF-8），
          那么没必要使用诸如<code>&amp;mdash;</code>、<code>&amp;rdquo;</code>或<code>&amp;#x263a;</code>的实体引用。
        </p>
        <p>
          唯一的例外情况是使用HTML中有特殊含义的字符（如<code>&lt;</code> and <code>&amp;</code>）
          以及控制或“不可见”字符（如非中断空格）。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          The currency symbol for the Euro is &amp;ldquo;&amp;eur;&amp;rdquo;.
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          The currency symbol for the Euro is “€”.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="可选的标签">
      <SUMMARY>
        省略可选的标签。（非强制性）
      </SUMMARY>
      <BODY>
        <p>
          为了优化文件大小和可扫描性，可以考虑省略可选标签。
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission">HTML5 specification</a>
          定义了哪些标签可以省略。
        </p>
        <p>
          （这个做法需要一定的时间来成为更普遍的指南，因为这个做法和web开发者平时学到的截然不同。
          为了保持一致性和简单性，最好省略所有可选标签，而不是选择性地省略。）
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;html&gt;
            &lt;head&gt;
              &lt;title&gt;Spending money, spending bytes&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
              &lt;p&gt;Sic.&lt;/p&gt;
            &lt;/body&gt;
          &lt;/html&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;Saving money, saving bytes&lt;/title&gt;
          &lt;p&gt;Qed.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="type属性">
      <SUMMARY>
        在链接样式表和脚本时省略<code>type</code>属性。
      </SUMMARY>
      <BODY>
        <p>
          在链接样式表和脚本时不要使用<code>type</code>属性，除非样式表不是使用CSS，或者脚本不是使用JavaScript。
        </p>
        <p>
          在这些地方指明<code>type</code>属性并不必要，因为HTML5默认使用
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#attr-style-type"><code>text/css</code></a>
          和
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#attr-script-type"><code>text/javascript</code></a>
          。这个用法即使对于旧浏览器来说，也十分安全。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"
            type="text/css"&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"
            type="text/javascript"&gt;&lt;/script&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="HTML格式规则">
    <STYLEPOINT title="总体格式">
      <SUMMARY>
        每个block、list、table元素都独立一行，每个子元素都使用缩进。
      </SUMMARY>
      <BODY>
        <p>
          根据元素各自的独立样式（CSS允许元素使用<code>display</code>属性来改变自身角色），
          每个block、list、table元素都独立一行。
        </p>
        <p>
          Also, indent them if they are child elements of a block,
          list, or table element.
          此外，如果他们是block、list、table元素的子元素，要对他们进行缩进。
        </p>
        <p>
          (If you run into issues around whitespace between list items
          it’s acceptable to put all <code>li</code> elements in one
          line. A linter is encouraged to throw a warning instead of
          an error.)
          （如果在列表项之间使用空白字符会引起问题的话，也可以将所有<code>li</code>放在同一行。
          代码分析工具应该抛出警告而不是错误。）
        </p>
        <CODE_SNIPPET>
          &lt;blockquote&gt;
            &lt;p&gt;&lt;em&gt;Space&lt;/em&gt;, the final frontier.&lt;/p&gt;
          &lt;/blockquote&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;ul&gt;
            &lt;li&gt;Moe
            &lt;li&gt;Larry
            &lt;li&gt;Curly
          &lt;/ul&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;table&gt;
            &lt;thead&gt;
              &lt;tr&gt;
                &lt;th scope="col"&gt;Income
                &lt;th scope="col"&gt;Taxes
            &lt;tbody&gt;
              &lt;tr&gt;
                &lt;td&gt;$ 5.00
                &lt;td&gt;$ 4.50
          &lt;/table&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="HTML引号">
      <SUMMARY>
        When quoting attributes values, use double quotation marks.
        在引用属性值时，使用双引号。
      </SUMMARY>
      <BODY>
        <p>
          Use double (<code>""</code>) rather than single quotation marks
          (<code>''</code>) around attribute values.
          使用双引号（<code>""</code>）而不是单引号（<code>''</code>）来括住属性值。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;a class='maia-button maia-button-secondary'&gt;Sign in&lt;/a&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;a class="maia-button maia-button-secondary"&gt;Sign in&lt;/a&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS样式规则">
    <STYLEPOINT title="CSS有效性">
      <SUMMARY>
        Use valid CSS where possible.
        尽可能使用有效的CSS。
      </SUMMARY>
      <BODY>
        <p>
          Unless dealing with CSS validator bugs or requiring
          proprietary syntax, use valid CSS code.
          使用有效的CSS代码，除非是为了处理CSS验证器的漏洞或者需要使用特殊语法。
        </p>
        
        <p>
          Use tools such as the <a href="http://jigsaw.w3.org/css-validator/">W3C
          CSS validator</a> to test.
          使用工具（如<a href="http://jigsaw.w3.org/css-validator/">W3C CSS validator</a>）进行有效性验证。
        </p>
        <p>
          Using valid CSS is a measurable baseline quality attribute
          that allows to spot CSS code that may not have any effect
          and can be removed, and that ensures proper CSS usage.
          使用有效的CSS是一个可衡量的基本质量属性，可以让我们找出哪些CSS代码没有任何作用，可以移除，
          确保了CSS的适度使用。
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID和Class命名">
      <SUMMARY>
        Use meaningful or generic ID and class names.
        使用有意义或者通用的ID和class名称。
      </SUMMARY>
      <BODY>
        <p>
          Instead of presentational or cryptic names, always use ID
          and class names that reflect the purpose of the element in
          question, or that are otherwise generic.
          总是使用可以反映有关元素目的的，或者通用的名称；而不要使用表象的或者含义模糊的名称。
        </p>
        <p>
          Names that are specific and reflect the purpose of the
          element should be preferred as these are most understandable
          and the least likely to change.
          特定的并且能反映元素目的的名称应该优先选用最容易理解的，也最不可能改变的。
        </p>
        <p>
          Generic names are simply a fallback for elements that have no
          particular or no meaning different from their siblings. They are
          typically needed as “helpers.”
          如果没有特定的或者与兄弟元素区分含义的名称，通用名称是个简单的备选。
          它们通常称为“helpers”。
        </p>
        <p>
          Using functional or generic names reduces the probability of
          unnecessary document or template changes.
          使用实用的或者通用的名称减少了不必要的文档和模板修改。
        </p>
        <BAD_CODE_SNIPPET>
          /* 不推荐：无意义 */
          #yee-1901 {}

          /* 不推荐：表象的 */
          .button-green {}
          .clear {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐：特定的 */
          #gallery {}
          #login {}
          .video {}

          /* 推荐：通用的 */
          .aux {}
          .alt {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID和Class命名风格">
      <SUMMARY>
        Use ID and class names that are as short as possible but as long as
        necessary.
        使用的ID和class名称尽可能短，但是尽需要地长。
      </SUMMARY>
      <BODY>
        <p>
          Try to convey what an ID or class is about while being as
          brief as possible.
          尽可能简要地表达出ID或者class的作用。
        </p>
        <p>
          Using ID and class names this way contributes to acceptable
          levels of understandability and code efficiency.
          采用这样的ID和class命名方式，有助于兼顾代码的可读性和执行效率。
        </p>
        <BAD_CODE_SNIPPET>
          /* 推荐 */
          #navigation {}
          .atr {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 不推荐 */
          #nav {}
          .author {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>

    <STYLEPOINT title="类型选择器">
      <SUMMARY>
        Avoid qualifying ID and class names with type selectors.
        避免在类型选择器中陈列ID和class名称。
      </SUMMARY>
      <BODY>
        <p>
          Unless necessary (for example with helper classes), do not
          use element names in conjunction with IDs or classes.
          不要把元素名和ID或class连起来使用，除非是必要情况（如helper class）。
        </p>
        <p>
          Avoiding unnecessary ancestor selectors is useful for <a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/">performance
          reasons</a>.
          避免不必要的祖先选择器有助于
          <a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/">performance reasons</a>。
        </p>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          ul#example {}
          div.error {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          #example {}
          .error {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="缩写属性">
      <SUMMARY>
        Use shorthand properties where possible.
        在可能的情况下使用缩写属性。
      </SUMMARY>
      <BODY>
        <p>
          CSS offers a variety of <a href="http://www.w3.org/TR/CSS21/about.html#shorthand">shorthand</a>
          properties (like <code>font</code>)
          that should be used whenever possible, even in cases where
          only one value is explicitly set.
          CSS提供了许多<a href="http://www.w3.org/TR/CSS21/about.html#shorthand">缩写</a>属性（如<code>font</code>），
          这些属性应该在可能的情况下多多采用，即使只明确设置了一个值。
        </p>
        <p>
          Using shorthand properties is useful for code efficiency and
          understandability.
          使用缩写属性有助于代码效率和可读性。
        </p>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          border-top-style: none;
          font-family: palatino, georgia, serif;
          font-size: 100%;
          line-height: 1.6;
          padding-bottom: 2em;
          padding-left: 1em;
          padding-right: 1em;
          padding-top: 0;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          border-top: 0;
          font: 100%/1.6 palatino, georgia, serif;
          padding: 0 1em 2em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="0和单位">
      <SUMMARY>
        Omit unit specification after “0” values.
        省略“0”值后面的单位。
      </SUMMARY>
      <BODY>
        <p>
          Do not use units after <code>0</code> values unless they are
          required.
          除非有明确的要求，不要在<code>0</code>值后面添加单位。
        </p>
        <CODE_SNIPPET>
          margin: 0;
          padding: 0;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="前置0">
      <SUMMARY>
        Omit leading “0”s in values.
        省略属性值中的前置“0”。
      </SUMMARY>
      <BODY>
        <p>
          Do not use put <code>0</code>s in front of values or lengths
          between -1 and 1.
          在使用介于-1和1之间的属性值或者长度时，省略前置<code>0</code>。
        </p>
        <CODE_SNIPPET>
          font-size: .8em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="十六进制表示法">
      <SUMMARY>
        Use 3 character hexadecimal notation where possible.
        尽可能使用3个字符的十六进制表示法。
      </SUMMARY>
      <BODY>
        <p>
          For color values that permit it, 3 character hexadecimal
          notation is shorter and more succinct.
          对于可以进行缩写的颜色值，3字符的十六进制表示法更短更简洁。
        </p>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          color: #eebbcc;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          color: #ebc;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="前缀">
      <SUMMARY>
        Prefix selectors with an application-specific prefix (optional).
        在选择器前添加标明应用的前缀（可选）。
      </SUMMARY>
      <BODY>
        <p>
          In large projects as well as for code that gets embedded in
          other projects or on external sites use prefixes (as
          namespaces) for ID and class names. Use short, unique
          identifiers followed by a dash.
          在大项目中，或者需要嵌入其他项目的代码中，还是外部站点上，应该在ID和class名称前使用前缀（作为命名空间）。
          使用简短的唯一的标识符，后面加上一个短横线。
        </p>
        
        
        <p>
          Using namespaces helps preventing naming conflicts and can
          make maintenance easier, for example in search and replace
          operations.
          使用命名空间有助于防止命名冲突，使得维护工作更简单，例如查找和替换操作。
        </p>
        <CODE_SNIPPET>
          .adw-help {} /* AdWords */
          #maia-note {} /* Maia */
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID和Class名称的分隔符">
      <SUMMARY>
        Separate words in ID and class names by a hyphen.
        用连字符来分隔ID和class名称里面的单词。
      </SUMMARY>
      <BODY>
        <p>
          Do not concatenate words and abbreviations in selectors by
          any characters (including none at all) other than hyphens,
          in order to improve understanding and scannability.
          除了连字符，不要把选择器的单词和缩写用其他任何字符（包括不使用分隔符）连起来。这样可以增进可理解性和可读性。
        </p>
        <BAD_CODE_SNIPPET>
          /* 不推荐：未分隔单词“demo”与“image” */
          .demoimage {}

          /* 不推荐：使用了下划线而不是连字符 */
          .error_status {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          #video-id {}
          .ads-sample {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Hacks">
      <SUMMARY>
        Avoid user agent detection as well as CSS “hacks”—try a different
        approach first.
        避免对用户代理（user agent）进行检测，也不要使用CSS“hacks”——有限尝试使用其他的解决方式。
      </SUMMARY>
      <BODY>
        <p>
          It’s tempting to address styling differences over user
          agent detection or special CSS filters, workarounds, and
          hacks. Both approaches should be considered last resort in
          order to achieve and maintain an efficient and manageable
          code base. Put another way, giving detection and hacks a
          free pass will hurt projects in the long run as projects
          tend to take the way of least resistance. That is, allowing
          and making it easy to use detection and hacks means using
          detection and hacks more frequently—and more frequently
          is too frequently.
          通过检测用户代理，或者通过特殊的CSS过滤器、解决方式、甚至hacks，来解决样式差别似乎很诱人。
          两种解决方式都应该被当成实现和维持高效可管理代码库的最后手段。
          换句话说，随意使用检测和hacks会长远地对项目造成伤害，因为项目总是倾向于采取最少阻力的方式进行。
          也就是说，允许或者轻易使用检测和hacks意味着更频繁地用到检测与hacks——更频繁就意味着太过频繁。
        </p>
        
        
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS格式规则">
    <STYLEPOINT title="声明顺序">
      <SUMMARY>
        Alphabetize declarations.
        按字母顺序进行声明。
      </SUMMARY>
      <BODY>
        <p>
          Put declarations in alphabetical order in order to achieve
          consistent code in a way that is easy to remember and
          maintain.
          
        </p>
        <p>
          Ignore vendor-specific prefixes for sorting purposes. However,
          multiple vendor-specific prefixes for a certain CSS property should
          be kept sorted (e.g. -moz prefix comes before -webkit).
        </p>
        <CODE_SNIPPET>
          background: fuchsia;
          border: 1px solid;
          -moz-border-radius: 4px;
          -webkit-border-radius: 4px;
          border-radius: 4px;
          color: black;
          text-align: center;
          text-indent: 2em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Block Content Indentation">
      <SUMMARY>
        Indent all block content.
      </SUMMARY>
      <BODY>
        <p>
          Indent all <a href="http://www.w3.org/TR/CSS21/syndata.html#block">block
          content</a>, that is rules within rules as well as declarations, so to
          reflect hierarchy and improve understanding.
        </p>
        <CODE_SNIPPET>
          @media screen, projection {

            html {
              background: #fff;
              color: #444;
            }

          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Declaration Stops">
      <SUMMARY>
        Use a semicolon after every declaration.
      </SUMMARY>
      <BODY>
        <p>
          End every declaration with a semicolon for consistency and
          extensibility reasons.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          .test {
            display: block;
            height: 100px
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          .test {
            display: block;
            height: 100px;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Property Name Stops">
      <SUMMARY>
        Use a space after a property name’s colon.
      </SUMMARY>
      <BODY>
        <p>
          Always use a single space between property and value (but no
          space between property and colon) for consistency reasons.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          h3 {
            font-weight:bold;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          h3 {
            font-weight: bold;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Declaration Block Separation">
      <SUMMARY>
        Use a space between the last selector and the declaration block.
      </SUMMARY>
      <BODY>
        <p>
          Always use a single space between the last selector and the opening
          brace that begins the <a href="http://www.w3.org/TR/CSS21/syndata.html#rule-sets">declaration
          block</a>.
        </p>
        <p>
          The opening brace should be on the same line as the last selector in a
          given rule.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: missing space */
          #video{
            margin-top: 1em;
          }

          /* Not recommended: unnecessary line break */
          #video
          {
            margin-top: 1em;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #video {
            margin-top: 1em;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Selector and Declaration Separation">
      <SUMMARY>
        Separate selectors and declarations by new lines.
      </SUMMARY>
      <BODY>
        <p>
          Always start a new line for each selector and declaration.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          a:focus, a:active {
            position: relative; top: 1px;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          h1,
          h2,
          h3 {
            font-weight: normal;
            line-height: 1.2;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Rule Separation">
      <SUMMARY>
        Separate rules by new lines.
      </SUMMARY>
      <BODY>
        <p>
          Always put a blank line (two line breaks) between rules.
        </p>
        <CODE_SNIPPET>
          html {
            background: #fff;
          }

          body {
            margin: auto;
            width: 50%;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="CSS Quotation Marks">
      <SUMMARY>
        Use single quotation marks for attribute selectors and property values.
      </SUMMARY>
      <BODY>
        <p>
          Use single (<code>''</code>) rather than double (<code>""</code>)
          quotation marks for attribute selectors or property values. Do not
          use quotation marks in URI values (<code>url()</code>).
        </p>
        <p>
          Exception: If you do need to use the <code>@charset</code> rule,
          use double quotation marks—<a href="http://www.w3.org/TR/CSS21/syndata.html#charset">single
          quotation marks are not permitted</a>.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          @import url("//www.google.com/css/maia.css");

          html {
            font-family: "open sans", arial, sans-serif;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          @import url(//www.google.com/css/maia.css);

          html {
            font-family: 'open sans', arial, sans-serif;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS Meta Rules">
    
    <STYLEPOINT title="Section Comments">
      <SUMMARY>
        Group sections by a section comment (optional).
      </SUMMARY>
      <BODY>
        <p>
          If possible, group style sheet sections together by using
          comments. Separate sections with new lines.
        </p>
        <CODE_SNIPPET>
          /* Header */

          #adw-header {}

          /* Footer */

          #adw-footer {}

          /* Gallery */

          .adw-gallery {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  

  <PARTING_WORDS>
    <p>
      <em>Be consistent.</em>
    </p>
    <p>
      If you’re editing code, take a few minutes to look at the code
      around you and determine its style. If they use spaces around
      all their arithmetic operators, you should too. If their
      comments have little boxes of hash marks around them, make your
      comments have little boxes of hash marks around them too.
    </p>
    <p>
      The point of having style guidelines is to have a common vocabulary
      of coding so people can concentrate on what you’re saying rather
      than on how you’re saying it. We present global style rules here so
      people know the vocabulary, but local style is also important. If
      code you add to a file looks drastically different from the existing
      code around it, it throws readers out of their rhythm when they go to
      read it. Avoid this.
    </p>
  </PARTING_WORDS>

  <p align="right">
    Revision 2.23
  </p>

</GUIDE>
