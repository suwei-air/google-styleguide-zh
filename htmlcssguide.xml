<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="styleguide.xsl"?>
<GUIDE title="Google HTML/CSS 编程风格指南">
  <p class="revision">
    
    版本号 2.23
  </p>
  
  <OVERVIEW>
    <CATEGORY title="重要提示">
      <STYLEPOINT title="显示该指南的隐藏详情">
        <SUMMARY>
          该编程风格指南包含了许多默认隐藏的详细信息。这些信息的左侧标有三角形图标。点击左侧的图标，你应该能看到下方显示的“好耶”。
        </SUMMARY>
        <BODY>
          <p>
            好耶！现在你知道可以展开条目来获取详细信息。此外，该文档上方还有“展开全部”按钮。
          </p>
        </BODY>
      </STYLEPOINT>
    </CATEGORY>
    <CATEGORY title="背景知识">
      
      <p>
        This document defines formatting and style rules for HTML and
        CSS. It aims at improving collaboration, code quality, and
        enabling supporting infrastructure. It applies to raw,
        working files that use HTML and CSS, including GSS
        files. Tools are free to obfuscate, minify, and compile as
        long as the general code quality is maintained.
        该文档定义了HTML和CSS的编码格式与风格，旨在改善合作、代码质量，并且使基础代码的支持成为可能。
        它应用于使用HTML和CSS的原始工作文件，包括GSS文件。工具可以自由地模糊、缩小、编译，直到达成总体的代码质量。
      </p>
      
      
    </CATEGORY>
  </OVERVIEW>

  <CATEGORY title="总体风格规则">
    <STYLEPOINT title="协议">
      <SUMMARY>
        省略嵌入资源的协议。
      </SUMMARY>
      <BODY>
        <p>
          省略指向图片、其他媒体文件、样式表、脚本文件的URL的协议部分（如<code>http:</code>、<code>https:</code>），除非这些文件不能同时支持两种协议。
        </p>
        <p>
          Omitting the protocol—which makes the URL
          relative—prevents mixed content issues and results in
          minor file size savings.
          省略协议可以使URL更相对，防止混合内容问题，节约文件大小。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;script src="http://www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          .example {
            background: url(http://www.google.com/images/example);
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          .example {
            background: url(//www.google.com/images/example);
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    
  </CATEGORY>

  <CATEGORY title="总体格式规则">
    <STYLEPOINT title="缩进">
      <SUMMARY>
        每次缩进两个空格。
      </SUMMARY>
      <BODY>
        <p>
          Don’t use tabs or mix tabs and spaces for indentation.
          别用制表符（tab）或者制表符和空格混用缩进。
        </p>
        <CODE_SNIPPET>
          &lt;ul&gt;
            &lt;li&gt;Fantastic
            &lt;li&gt;Great
          &lt;/ul&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          .example {
            color: blue;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="大小写">
      <SUMMARY>
        只用小写。
      </SUMMARY>
      <BODY>
        <p>
          所有代码都应该使用小写：应用于包括HTML元素名、元素属性、元素属性值（除了<code>text/CDATA</code>）、
          CSS选择器、CSS属性、CSS属性值（字符串除外）。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;A HREF="/"&gt;Home&lt;/A&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;img src="google.png" alt="Google"&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          /* 不推荐 */
          color: #E5E5E5;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* 推荐 */
          color: #e5e5e5;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="末尾的空格">
      <SUMMARY>
        删掉末尾的空格。
      </SUMMARY>
      <BODY>
        <p>
          末尾的空格没有意义，而且可能使diff程序复杂化。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;p&gt;What?_
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;p&gt;Yes please.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="总体元标签规则">
    <STYLEPOINT title="编码">
      <SUMMARY>
        使用UTF-8（无BOM）编码。
      </SUMMARY>
      <BODY>
        <p>
          确保你的编辑器使用不含字节顺序标记（BOM）的UTF-8作为字符编码。
        </p>
        <p>
          通过<code>&lt;meta charset="utf-8"&gt;</code>指定HTML模板和文档的编码。不要指定样式表的编码，样式表文件会默认编码为UTF-8。
        </p>
        <p>
          （更多关于编码的信息，以及何时如何指定编码可以参考<a href="http://www.w3.org/International/tutorials/tutorial-char-enc/">Handling character encodings in HTML and CSS</a>。）
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="注释">
      <SUMMARY>
        在可能的情况下，解释必要的代码。
      </SUMMARY>
      <BODY>
        <p>
          使用注释来解释代码：这段代码包含了什么，它是用于什么目的，为什么选用这个解决方式？
        </p>
        <p>
          （该项不是必须的，因为期望于总是保持良好的文档代码并不现实。实现程度可能根据HTML和CSS代码有很大的不同，也同时依赖于项目的复杂程度。）
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="活动项目">
      <SUMMARY>
        用<code>TODO</code>来标记待办事项和活动项目。
      </SUMMARY>
      <BODY>
        <p>
          仅仅使用关键字<code>TODO</code>来突出待办事项，而不要用其他的诸如<code>@@</code>的一般格式。
        </p>
        <p>
          可以在后面括号里加上联系人（用户名或者邮件列表），格式如<code>TODO(contact)</code>。
        </p>
        <p>
          在冒号后写上工作项，格式如<code>TODO: 工作项</code>。
        </p>
        
        <CODE_SNIPPET>
          {# TODO(john.doe): revisit centering #}
          &lt;center&gt;Test&lt;/center&gt;
        </CODE_SNIPPET>
        
        <CODE_SNIPPET>
          &lt;!-- TODO: remove optional tags --&gt;
          &lt;ul&gt;
            &lt;li&gt;Apples&lt;/li&gt;
            &lt;li&gt;Oranges&lt;/li&gt;
          &lt;/ul&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="HTML格式规则">
    <STYLEPOINT title="文档类型">
      <SUMMARY>
        使用HTML5。
      </SUMMARY>
      <BODY>
        <p>
          HTML5（HTML语法）是所有HTML文档的首选：<code>&lt;!DOCTYPE html&gt;</code>.
        </p>
        <p>
          （推荐使用HTML（<code>text/html</code>），而不要使用XHTML。XHTML（<a href="http://hixie.ch/advocacy/xhtml"><code>application/xhtml+xml</code></a>）缺乏浏览器和架构支持，而且相对HTML提供了较少的优化空间。
        </p>
        <p>
          虽然HTML支持这个写法，但最好不要闭合空元素。也就是说，应该写成<code>&lt;br&gt;</code>，而不是<code>&lt;br /&gt;</code>。
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="HTML合法性校验">
      <SUMMARY>
        尽可能地使用符合语法的HTML。
      </SUMMARY>
      <BODY>
        <p>
          使用符合语法的HTML代码，除非由于文件大小限制而无法实现。
        </p>
        
        <p>
          使用校验工具（如<a href="http://validator.w3.org/nu/">W3C HTML校验器</a>进行测试。
        </p>
        <p>
          Using valid HTML is a measurable baseline quality attribute
          that contributes to learning about technical requirements
          and constraints, and that ensures proper HTML usage.
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;title&gt;测试&lt;/title&gt;
          &lt;article&gt;这仅仅是个测试。
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;meta charset="utf-8"&gt;
          &lt;title&gt;测试&lt;/title&gt;
          &lt;article&gt;这仅仅是个测试。&lt;/article&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="语义">
      <SUMMARY>
        根据适用情况使用对应HTML元素。
      </SUMMARY>
      <BODY>
        <p>
          在对应元素的设计场景下使用适当元素（有时被不恰当地称为“标签”）。
          例如，在标题部分使用<code>heading</code>元素，在段落中使用<code>p</code>元素，在锚点使用<code>a</code>元素，如此等等。
        </p>
        <p>
          根据HTML的设计原意来使用标签，在可访问性、重用、代码效率上都有重要意义。
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- 不推荐 --&gt;
          &lt;div onclick="goToRecommendations();"&gt;All recommendations&lt;/div&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- 推荐 --&gt;
          &lt;a href="recommendations/"&gt;All recommendations&lt;/a&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Multimedia Fallback">
      <SUMMARY>
        Provide alternative contents for multimedia.
      </SUMMARY>
      <BODY>
        <p>
          For multimedia, such as images, videos, animated objects via
          <code>canvas</code>, make sure to offer alternative
          access. For images that means use of meaningful alternative
          text (<code>alt</code>) and for video and audio transcripts
          and captions, if available.
        </p>
        <p>
          Providing alternative contents is important for
          accessibility reasons: A blind user has few cues to tell
          what an image is about without <code>@alt</code>, and other
          users may have no way of understanding what video or audio
          contents are about either.
        </p>
        <p>
          (For images whose <code>alt</code> attributes would
          introduce redundancy, and for images whose purpose is purely
          decorative which you cannot immediately use CSS for, use no
          alternative text, as in <code>alt=""</code>.)
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;img src="spreadsheet.png"&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;img src="spreadsheet.png" alt="Spreadsheet screenshot."&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>

    <STYLEPOINT title="Separation of Concerns">
      <SUMMARY>
        Separate structure from presentation from behavior.
      </SUMMARY>
      <BODY>
        <p>
          Strictly keep structure (markup), presentation (styling),
          and behavior (scripting) apart, and try to keep the
          interaction between the three to an absolute minimum.
        </p>
        <p>
          That is, make sure documents and templates contain only HTML
          and HTML that is solely serving structural purposes. Move
          everything presentational into style sheets, and everything
          behavioral into scripts.
        </p>
        <p>
          In addition, keep the contact area as small as possible by
          linking as few style sheets and scripts as possible from
          documents and templates.
        </p>
        <p>
          Separating structure from presentation from behavior is
          important for maintenance reasons. It is always more
          expensive to change HTML documents and templates than it is
          to update style sheets and scripts.
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;HTML sucks&lt;/title&gt;
          &lt;link rel="stylesheet" href="base.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="grid.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="print.css" media="print"&gt;
          &lt;h1 style="font-size: 1em;"&gt;HTML sucks&lt;/h1&gt;
          &lt;p&gt;I’ve read about this on a few sites but now I’m sure:
            &lt;u&gt;HTML is stupid!!1&lt;/u&gt;
          &lt;center&gt;I can’t believe there’s no way to control the styling of
            my website without doing everything all over again!&lt;/center&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;My first CSS-only redesign&lt;/title&gt;
          &lt;link rel="stylesheet" href="default.css"&gt;
          &lt;h1&gt;My first CSS-only redesign&lt;/h1&gt;
          &lt;p&gt;I’ve read about this on a few sites but today I’m actually
            doing it: separating concerns and avoiding anything in the HTML of
            my website that is presentational.
          &lt;p&gt;It’s awesome!
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Entity References">
      <SUMMARY>
        Do not use entity references.
      </SUMMARY>
      <BODY>
        <p>
          There is no need to use entity references like
          <code>&amp;mdash;</code>, <code>&amp;rdquo;</code>, or
          <code>&amp;#x263a;</code>, assuming the same encoding
          (UTF-8) is used for files and editors as well as among
          teams.
        </p>
        <p>
          The only exceptions apply to characters with special meaning
          in HTML (like <code>&lt;</code> and <code>&amp;</code>) as
          well as control or “invisible” characters (like no-break
          spaces).
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          The currency symbol for the Euro is &amp;ldquo;&amp;eur;&amp;rdquo;.
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          The currency symbol for the Euro is “€”.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Optional Tags">
      <SUMMARY>
        Omit optional tags (optional).
      </SUMMARY>
      <BODY>
        <p>
          For file size optimization and scannability purposes,
          consider omitting optional tags.
          The <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission">HTML5
          specification</a> defines what tags can be omitted.
        </p>
        <p>
          (This approach may require a grace period to be established
          as a wider guideline as it’s significantly different
          from what web developers are typically taught. For
          consistency and simplicity reasons it’s best served
          omitting all optional tags, not just a selection.)
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;html&gt;
            &lt;head&gt;
              &lt;title&gt;Spending money, spending bytes&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
              &lt;p&gt;Sic.&lt;/p&gt;
            &lt;/body&gt;
          &lt;/html&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;Saving money, saving bytes&lt;/title&gt;
          &lt;p&gt;Qed.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="type Attributes">
      <SUMMARY>
        Omit <code>type</code> attributes for style sheets and scripts.
      </SUMMARY>
      <BODY>
        <p>
          Do not use <code>type</code> attributes for style sheets
          (unless not using CSS) and scripts (unless not using
          JavaScript).
        </p>
        <p>
          Specifying <code>type</code> attributes in these contexts is
          not necessary as HTML5 implies
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#attr-style-type"><code>text/css</code></a>
          and
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#attr-script-type"><code>text/javascript</code></a>
          as defaults. This can be safely done even for older browsers.
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"
            type="text/css"&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"
            type="text/javascript"&gt;&lt;/script&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="HTML Formatting Rules">
    <STYLEPOINT title="General Formatting">
      <SUMMARY>
        Use a new line for every block, list, or table element, and
        indent every such child element.
      </SUMMARY>
      <BODY>
        <p>
          Independent of the styling of an element (as CSS allows
          elements to assume a different role per <code>display</code>
          property), put every block, list, or table element on a new
          line.
        </p>
        <p>
          Also, indent them if they are child elements of a block,
          list, or table element.
        </p>
        <p>
          (If you run into issues around whitespace between list items
          it’s acceptable to put all <code>li</code> elements in one
          line. A linter is encouraged to throw a warning instead of
          an error.)
        </p>
        <CODE_SNIPPET>
          &lt;blockquote&gt;
            &lt;p&gt;&lt;em&gt;Space&lt;/em&gt;, the final frontier.&lt;/p&gt;
          &lt;/blockquote&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;ul&gt;
            &lt;li&gt;Moe
            &lt;li&gt;Larry
            &lt;li&gt;Curly
          &lt;/ul&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;table&gt;
            &lt;thead&gt;
              &lt;tr&gt;
                &lt;th scope="col"&gt;Income
                &lt;th scope="col"&gt;Taxes
            &lt;tbody&gt;
              &lt;tr&gt;
                &lt;td&gt;$ 5.00
                &lt;td&gt;$ 4.50
          &lt;/table&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="HTML Quotation Marks">
      <SUMMARY>
        When quoting attributes values, use double quotation marks.
      </SUMMARY>
      <BODY>
        <p>
          Use double (<code>""</code>) rather than single quotation marks
          (<code>''</code>) around attribute values.
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;a class='maia-button maia-button-secondary'&gt;Sign in&lt;/a&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;a class="maia-button maia-button-secondary"&gt;Sign in&lt;/a&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS Style Rules">
    <STYLEPOINT title="CSS Validity">
      <SUMMARY>
        Use valid CSS where possible.
      </SUMMARY>
      <BODY>
        <p>
          Unless dealing with CSS validator bugs or requiring
          proprietary syntax, use valid CSS code.
        </p>
        
        <p>
          Use tools such as the <a href="http://jigsaw.w3.org/css-validator/">W3C
          CSS validator</a> to test.
        </p>
        <p>
          Using valid CSS is a measurable baseline quality attribute
          that allows to spot CSS code that may not have any effect
          and can be removed, and that ensures proper CSS usage.
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID and Class Naming">
      <SUMMARY>
        Use meaningful or generic ID and class names.
      </SUMMARY>
      <BODY>
        <p>
          Instead of presentational or cryptic names, always use ID
          and class names that reflect the purpose of the element in
          question, or that are otherwise generic.
        </p>
        <p>
          Names that are specific and reflect the purpose of the
          element should be preferred as these are most understandable
          and the least likely to change.
        </p>
        <p>
          Generic names are simply a fallback for elements that have no
          particular or no meaning different from their siblings. They are
          typically needed as “helpers.”
        </p>
        <p>
          Using functional or generic names reduces the probability of
          unnecessary document or template changes.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: meaningless */
          #yee-1901 {}

          /* Not recommended: presentational */
          .button-green {}
          .clear {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended: specific */
          #gallery {}
          #login {}
          .video {}

          /* Recommended: generic */
          .aux {}
          .alt {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID and Class Name Style">
      <SUMMARY>
        Use ID and class names that are as short as possible but as long as
        necessary.
      </SUMMARY>
      <BODY>
        <p>
          Try to convey what an ID or class is about while being as
          brief as possible.
        </p>
        <p>
          Using ID and class names this way contributes to acceptable
          levels of understandability and code efficiency.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          #navigation {}
          .atr {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #nav {}
          .author {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>

    <STYLEPOINT title="Type Selectors">
      <SUMMARY>
        Avoid qualifying ID and class names with type selectors.
      </SUMMARY>
      <BODY>
        <p>Unless necessary (for example with helper classes), do not
          use element names in conjunction with IDs or classes.
        </p>
        <p>
          Avoiding unnecessary ancestor selectors is useful for <a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/">performance
          reasons</a>.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          ul#example {}
          div.error {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #example {}
          .error {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Shorthand Properties">
      <SUMMARY>
        Use shorthand properties where possible.
      </SUMMARY>
      <BODY>
        <p>
          CSS offers a variety of <a href="http://www.w3.org/TR/CSS21/about.html#shorthand">shorthand</a>
          properties (like <code>font</code>)
          that should be used whenever possible, even in cases where
          only one value is explicitly set.
        </p>
        <p>
          Using shorthand properties is useful for code efficiency and
          understandability.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          border-top-style: none;
          font-family: palatino, georgia, serif;
          font-size: 100%;
          line-height: 1.6;
          padding-bottom: 2em;
          padding-left: 1em;
          padding-right: 1em;
          padding-top: 0;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          border-top: 0;
          font: 100%/1.6 palatino, georgia, serif;
          padding: 0 1em 2em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="0 and Units">
      <SUMMARY>
        Omit unit specification after “0” values.
      </SUMMARY>
      <BODY>
        <p>
          Do not use units after <code>0</code> values unless they are
          required.
        </p>
        <CODE_SNIPPET>
          margin: 0;
          padding: 0;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Leading 0s">
      <SUMMARY>
        Omit leading “0”s in values.
      </SUMMARY>
      <BODY>
        <p>
          Do not use put <code>0</code>s in front of values or lengths
          between -1 and 1.
        </p>
        <CODE_SNIPPET>
          font-size: .8em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Hexadecimal Notation">
      <SUMMARY>
        Use 3 character hexadecimal notation where possible.
      </SUMMARY>
      <BODY>
        <p>
          For color values that permit it, 3 character hexadecimal
          notation is shorter and more succinct.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          color: #eebbcc;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          color: #ebc;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Prefixes">
      <SUMMARY>
        Prefix selectors with an application-specific prefix (optional).
      </SUMMARY>
      <BODY>
        <p>
          In large projects as well as for code that gets embedded in
          other projects or on external sites use prefixes (as
          namespaces) for ID and class names. Use short, unique
          identifiers followed by a dash.
        </p>
        
        
        <p>
          Using namespaces helps preventing naming conflicts and can
          make maintenance easier, for example in search and replace
          operations.
        </p>
        <CODE_SNIPPET>
          .adw-help {} /* AdWords */
          #maia-note {} /* Maia */
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID and Class Name Delimiters">
      <SUMMARY>
        Separate words in ID and class names by a hyphen.
      </SUMMARY>
      <BODY>
        <p>
          Do not concatenate words and abbreviations in selectors by
          any characters (including none at all) other than hyphens,
          in order to improve understanding and scannability.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: does not separate the words “demo” and “image” */
          .demoimage {}

          /* Not recommended: uses underscore instead of hyphen */
          .error_status {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #video-id {}
          .ads-sample {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Hacks">
      <SUMMARY>
        Avoid user agent detection as well as CSS “hacks”—try a different
        approach first.
      </SUMMARY>
      <BODY>
        <p>
          It’s tempting to address styling differences over user
          agent detection or special CSS filters, workarounds, and
          hacks. Both approaches should be considered last resort in
          order to achieve and maintain an efficient and manageable
          code base. Put another way, giving detection and hacks a
          free pass will hurt projects in the long run as projects
          tend to take the way of least resistance. That is, allowing
          and making it easy to use detection and hacks means using
          detection and hacks more frequently—and more frequently
          is too frequently.
        </p>
        
        
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS Formatting Rules">
    <STYLEPOINT title="Declaration Order">
      <SUMMARY>
        Alphabetize declarations.
      </SUMMARY>
      <BODY>
        <p>
          Put declarations in alphabetical order in order to achieve
          consistent code in a way that is easy to remember and
          maintain.
        </p>
        <p>
          Ignore vendor-specific prefixes for sorting purposes. However,
          multiple vendor-specific prefixes for a certain CSS property should
          be kept sorted (e.g. -moz prefix comes before -webkit).
        </p>
        <CODE_SNIPPET>
          background: fuchsia;
          border: 1px solid;
          -moz-border-radius: 4px;
          -webkit-border-radius: 4px;
          border-radius: 4px;
          color: black;
          text-align: center;
          text-indent: 2em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Block Content Indentation">
      <SUMMARY>
        Indent all block content.
      </SUMMARY>
      <BODY>
        <p>
          Indent all <a href="http://www.w3.org/TR/CSS21/syndata.html#block">block
          content</a>, that is rules within rules as well as declarations, so to
          reflect hierarchy and improve understanding.
        </p>
        <CODE_SNIPPET>
          @media screen, projection {

            html {
              background: #fff;
              color: #444;
            }

          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Declaration Stops">
      <SUMMARY>
        Use a semicolon after every declaration.
      </SUMMARY>
      <BODY>
        <p>
          End every declaration with a semicolon for consistency and
          extensibility reasons.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          .test {
            display: block;
            height: 100px
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          .test {
            display: block;
            height: 100px;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Property Name Stops">
      <SUMMARY>
        Use a space after a property name’s colon.
      </SUMMARY>
      <BODY>
        <p>
          Always use a single space between property and value (but no
          space between property and colon) for consistency reasons.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          h3 {
            font-weight:bold;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          h3 {
            font-weight: bold;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Declaration Block Separation">
      <SUMMARY>
        Use a space between the last selector and the declaration block.
      </SUMMARY>
      <BODY>
        <p>
          Always use a single space between the last selector and the opening
          brace that begins the <a href="http://www.w3.org/TR/CSS21/syndata.html#rule-sets">declaration
          block</a>.
        </p>
        <p>
          The opening brace should be on the same line as the last selector in a
          given rule.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: missing space */
          #video{
            margin-top: 1em;
          }

          /* Not recommended: unnecessary line break */
          #video
          {
            margin-top: 1em;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #video {
            margin-top: 1em;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Selector and Declaration Separation">
      <SUMMARY>
        Separate selectors and declarations by new lines.
      </SUMMARY>
      <BODY>
        <p>
          Always start a new line for each selector and declaration.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          a:focus, a:active {
            position: relative; top: 1px;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          h1,
          h2,
          h3 {
            font-weight: normal;
            line-height: 1.2;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Rule Separation">
      <SUMMARY>
        Separate rules by new lines.
      </SUMMARY>
      <BODY>
        <p>
          Always put a blank line (two line breaks) between rules.
        </p>
        <CODE_SNIPPET>
          html {
            background: #fff;
          }

          body {
            margin: auto;
            width: 50%;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="CSS Quotation Marks">
      <SUMMARY>
        Use single quotation marks for attribute selectors and property values.
      </SUMMARY>
      <BODY>
        <p>
          Use single (<code>''</code>) rather than double (<code>""</code>)
          quotation marks for attribute selectors or property values. Do not
          use quotation marks in URI values (<code>url()</code>).
        </p>
        <p>
          Exception: If you do need to use the <code>@charset</code> rule,
          use double quotation marks—<a href="http://www.w3.org/TR/CSS21/syndata.html#charset">single
          quotation marks are not permitted</a>.
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          @import url("//www.google.com/css/maia.css");

          html {
            font-family: "open sans", arial, sans-serif;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          @import url(//www.google.com/css/maia.css);

          html {
            font-family: 'open sans', arial, sans-serif;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS Meta Rules">
    
    <STYLEPOINT title="Section Comments">
      <SUMMARY>
        Group sections by a section comment (optional).
      </SUMMARY>
      <BODY>
        <p>
          If possible, group style sheet sections together by using
          comments. Separate sections with new lines.
        </p>
        <CODE_SNIPPET>
          /* Header */

          #adw-header {}

          /* Footer */

          #adw-footer {}

          /* Gallery */

          .adw-gallery {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  

  <PARTING_WORDS>
    <p>
      <em>Be consistent.</em>
    </p>
    <p>
      If you’re editing code, take a few minutes to look at the code
      around you and determine its style. If they use spaces around
      all their arithmetic operators, you should too. If their
      comments have little boxes of hash marks around them, make your
      comments have little boxes of hash marks around them too.
    </p>
    <p>
      The point of having style guidelines is to have a common vocabulary
      of coding so people can concentrate on what you’re saying rather
      than on how you’re saying it. We present global style rules here so
      people know the vocabulary, but local style is also important. If
      code you add to a file looks drastically different from the existing
      code around it, it throws readers out of their rhythm when they go to
      read it. Avoid this.
    </p>
  </PARTING_WORDS>

  <p align="right">
    Revision 2.23
  </p>

</GUIDE>
